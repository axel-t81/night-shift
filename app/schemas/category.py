"""
Category Pydantic Schemas

These schemas define the data validation and serialization for Category objects.
They control what data can be sent to and received from the API.

Schema Types:
- CategoryBase: Common fields shared across all schemas
- CategoryCreate: Fields required when creating a new category (POST)
- CategoryUpdate: Fields that can be updated (PUT/PATCH) - all optional
- Category: Complete category as returned from the API (GET) - includes id and timestamps
"""

from pydantic import BaseModel, Field, field_validator
from datetime import datetime
from typing import Optional
import re


# Base schema with common fields
class CategoryBase(BaseModel):
    """
    Base schema containing fields common to all category operations.
    
    Fields:
    - name: Category/project name (e.g., "Deep Work", "Learning", "Exercise")
    - color: Optional hex color code for UI display (e.g., "#FF5733")
    """
    name: str = Field(..., min_length=1, max_length=100, description="Category name")
    color: Optional[str] = Field(None, max_length=7, description="Hex color code (e.g., #FF5733)")
    
    @field_validator('color')
    @classmethod
    def validate_color(cls, v: Optional[str]) -> Optional[str]:
        """
        Validate that color is a valid hex code format.
        Accepts formats: #RGB, #RRGGBB (case insensitive)
        """
        if v is None:
            return v
        if not re.match(r'^#[0-9A-Fa-f]{3}([0-9A-Fa-f]{3})?$', v):
            raise ValueError('Color must be a valid hex code (e.g., #FF5733 or #F53)')
        return v.upper()  # Normalize to uppercase


# Schema for creating a new category (POST request)
class CategoryCreate(CategoryBase):
    """
    Schema for creating a new category.
    Inherits all fields from CategoryBase.
    
    No id or timestamps needed - these are auto-generated by the database.
    
    Example:
    {
        "name": "Deep Work",
        "color": "#1E90FF"
    }
    """
    pass


# Schema for updating an existing category (PUT/PATCH request)
class CategoryUpdate(BaseModel):
    """
    Schema for updating a category.
    All fields are optional - only provide fields you want to update.
    
    Example (partial update):
    {
        "color": "#FF6347"  # Only update the color
    }
    """
    name: Optional[str] = Field(None, min_length=1, max_length=100)
    color: Optional[str] = Field(None, max_length=7)
    
    @field_validator('color')
    @classmethod
    def validate_color(cls, v: Optional[str]) -> Optional[str]:
        """Validate hex color format if provided"""
        if v is None:
            return v
        if not re.match(r'^#[0-9A-Fa-f]{3}([0-9A-Fa-f]{3})?$', v):
            raise ValueError('Color must be a valid hex code (e.g., #FF5733 or #F53)')
        return v.upper()


# Schema for category as stored in database and returned by API (GET response)
class Category(CategoryBase):
    """
    Complete category schema as returned by the API.
    Includes all fields from CategoryBase plus database-generated fields.
    
    Additional fields:
    - id: UUID string identifier
    - created_at: When the category was created
    - updated_at: When the category was last modified
    
    Example response:
    {
        "id": "123e4567-e89b-12d3-a456-426614174000",
        "name": "Deep Work",
        "color": "#1E90FF",
        "created_at": "2024-01-15T10:30:00",
        "updated_at": "2024-01-15T10:30:00"
    }
    """
    id: str
    created_at: datetime
    updated_at: datetime
    
    class Config:
        """
        Pydantic configuration:
        - from_attributes: Allows creation from SQLAlchemy models (ORM mode)
        This enables: Category.model_validate(db_category_object)
        """
        from_attributes = True

