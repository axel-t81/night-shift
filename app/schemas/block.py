"""
Block Pydantic Schemas

These schemas define the data validation and serialization for Block (time block) objects.
Blocks represent Pomodoro sessions or time containers that hold tasks.

Schema Types:
- BlockBase: Common fields shared across all schemas
- BlockCreate: Fields required when creating a new block (POST)
- BlockUpdate: Fields that can be updated (PUT/PATCH) - all optional
- Block: Complete block as returned from the API (GET) - includes id and timestamps
"""

from pydantic import BaseModel, Field, field_validator
from datetime import datetime
from typing import Optional


# Base schema with common fields
class BlockBase(BaseModel):
    """
    Base schema for time blocks.
    
    A block represents a Pomodoro session or work block containing tasks.
    
    Fields:
    - start_time: When this time block begins
    - end_time: When this time block ends
    - title: Descriptive title for the block (e.g., "Morning Deep Work", "Evening Study")
    - block_number: Optional order within a day (e.g., 1, 2, 3 for 1st, 2nd, 3rd block)
    - day_number: Optional day number in the schedule (e.g., 1 for Monday, 2 for Tuesday)
    """
    start_time: datetime = Field(..., description="Block start time")
    end_time: datetime = Field(..., description="Block end time")
    title: str = Field(..., min_length=1, max_length=200, description="Block title")
    block_number: Optional[int] = Field(None, ge=1, description="Order within the day (1, 2, 3, ...)")
    day_number: Optional[int] = Field(None, ge=1, le=7, description="Day of cycle (1-4)")
    
    @field_validator('end_time')
    @classmethod
    def validate_time_range(cls, v: datetime, info) -> datetime:
        """
        Validate that end_time is after start_time.
        This ensures blocks have a valid time range.
        """
        # info.data contains other field values during validation
        if 'start_time' in info.data and v <= info.data['start_time']:
            raise ValueError('end_time must be after start_time')
        return v


# Schema for creating a new block (POST request)
class BlockCreate(BlockBase):
    """
    Schema for creating a new time block.
    Inherits all fields from BlockBase.
    
    No id or created_at needed - these are auto-generated by the database.
    
    Example:
    {
        "start_time": "2024-01-15T22:00:00",
        "end_time": "2024-01-16T00:00:00",
        "title": "Night Shift Block 1",
        "block_number": 1,
        "day_number": 1
    }
    """
    pass


# Schema for updating an existing block (PUT/PATCH request)
class BlockUpdate(BaseModel):
    """
    Schema for updating a block.
    All fields are optional - only provide fields you want to update.
    
    Example (partial update):
    {
        "title": "Updated Block Title",
        "block_number": 2
    }
    """
    start_time: Optional[datetime] = None
    end_time: Optional[datetime] = None
    title: Optional[str] = Field(None, min_length=1, max_length=200)
    block_number: Optional[int] = Field(None, ge=1)
    day_number: Optional[int] = Field(None, ge=1, le=7)
    
    @field_validator('end_time')
    @classmethod
    def validate_time_range(cls, v: Optional[datetime], info) -> Optional[datetime]:
        """Validate time range if both times are being updated"""
        if v is None:
            return v
        if 'start_time' in info.data and info.data['start_time'] is not None and v <= info.data['start_time']:
            raise ValueError('end_time must be after start_time')
        return v


# Schema for block as stored in database and returned by API (GET response)
class Block(BlockBase):
    """
    Complete block schema as returned by the API.
    Includes all fields from BlockBase plus database-generated fields.
    
    Additional fields:
    - id: UUID string identifier
    - created_at: When the block was created
    
    Example response:
    {
        "id": "123e4567-e89b-12d3-a456-426614174000",
        "start_time": "2024-01-15T22:00:00",
        "end_time": "2024-01-16T00:00:00",
        "title": "Night Shift Block 1",
        "block_number": 1,
        "day_number": 1,
        "created_at": "2024-01-15T10:30:00"
    }
    """
    id: str
    created_at: datetime
    
    class Config:
        """
        Pydantic configuration:
        - from_attributes: Allows creation from SQLAlchemy models (ORM mode)
        This enables: Block.model_validate(db_block_object)
        """
        from_attributes = True

